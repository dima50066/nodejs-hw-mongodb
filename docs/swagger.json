{
  "openapi": "3.0.0",
  "info": {
    "title": "Contacts and Auth API",
    "version": "1.0.0",
    "description": "API for managing contacts and user authentication",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "https://nodejs-hw-mongodb-4-1czg.onrender.com"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Contacts",
      "description": "Operations about contacts."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    }
  ],
  "paths": {
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get all contacts",
        "operationId": "getAllContacts",
        "description": "Retrieve a list of all contacts for the authenticated user.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "description": "Number of items per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "description": "Sorted in ascending or descending order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "description": "Sort contacts by a specific field.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "phoneNumber",
                "email",
                "contactType",
                "isFavourite",
                "createdAt",
                "updatedAt"
              ]
            }
          },
          {
            "name": "contactType",
            "in": "query",
            "required": false,
            "description": "Filter contacts by type (work, home, personal).",
            "schema": {
              "type": "string",
              "enum": [
                "work",
                "home",
                "personal"
              ]
            }
          },
          {
            "name": "isFavourite",
            "in": "query",
            "required": false,
            "description": "Filter contacts by favorite status.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contacts fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/contacts"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create a new contact",
        "operationId": "createContact",
        "description": "Create a new contact for the authenticated user.",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "The contact photo to upload (file)."
                  },
                  "contactData": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the contact."
                      },
                      "phoneNumber": {
                        "type": "string",
                        "description": "Phone number of the contact."
                      },
                      "contactType": {
                        "type": "string",
                        "enum": [
                          "personal",
                          "work"
                        ],
                        "description": "Type of contact (personal or work)."
                      },
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Email of the contact."
                      },
                      "isFavourite": {
                        "type": "boolean",
                        "description": "Whether the contact is marked as favourite."
                      }
                    },
                    "required": [
                      "name",
                      "phoneNumber"
                    ]
                  }
                },
                "description": "Object containing fields to create a contact. Include only the required fields."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact created successfully."
          },
          "400": {
            "description": "Invalid data in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid data provided."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{contactId}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get a contact by ID",
        "operationId": "getContactById",
        "description": "Retrieve the details of a specific contact using their unique identifier.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the contact to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with the contact details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contacts"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          }
        }
      },
      "patch": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update a contact by ID",
        "operationId": "updateContact",
        "description": "Update specific contact fields using their unique identifier.",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the contact to update.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "The contact photo to upload (file). If both a photo file and a URL are provided, the file will take precedence."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the contact."
                  },
                  "phoneNumber": {
                    "type": "string",
                    "description": "Phone number of the contact."
                  },
                  "contactType": {
                    "type": "string",
                    "enum": [
                      "personal",
                      "work",
                      "home"
                    ],
                    "description": "Type of contact."
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email of the contact."
                  },
                  "isFavourite": {
                    "type": "boolean",
                    "description": "Whether the contact is marked as favourite."
                  }
                },
                "required": [
                  "name",
                  "phoneNumber"
                ],
                "description": "Object containing fields to update for the contact. Only include the fields that need to be updated."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact updated successfully."
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete a contact by ID",
        "operationId": "deleteContact",
        "description": "Delete a specific contact using their unique identifier.",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the contact to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Contact deleted successfully."
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "requestBody": {
          "description": "User registration data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Register"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "Invalid input data"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log in an existing user",
        "operationId": "loginUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in"
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log out the current user",
        "operationId": "logoutUser",
        "responses": {
          "204": {
            "description": "User successfully logged out"
          },
          "400": {
            "description": "Bad request - Invalid request data"
          },
          "401": {
            "description": "Unauthorized - User is not logged in"
          },
          "500": {
            "description": "Logout failed - Server error"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh user session",
        "operationId": "refreshSession",
        "responses": {
          "200": {
            "description": "Session successfully refreshed"
          },
          "401": {
            "description": "Session refresh failed"
          }
        }
      }
    },
    "/auth/send-reset-email": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Send reset password email",
        "operationId": "sendResetEmail",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestResetEmail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset password email sent"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/reset-pwd": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset user password",
        "operationId": "resetPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully reset"
          },
          "401": {
            "description": "Invalid or expired token"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "NotFound": {
        "$ref": "#/components/responses/notFound"
      },
      "Unauthorized": {
        "$ref": "#/components/responses/unauthorized"
      },
      "notFound": {
        "description": "Not found response for contacts.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Contact not found."
                }
              }
            }
          }
        }
      },
      "unauthorized": {
        "description": "Unauthorized. The request requires user authentication or the authentication has failed.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Unauthorized. Please provide valid credentials."
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "Contact": {
        "$ref": "#/components/schemas/contacts"
      },
      "Auth": {
        "$ref": "#/components/schemas/auth"
      },
      "contacts": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier for the user who owns the contact."
          },
          "name": {
            "type": "string",
            "description": "Name of the contact.",
            "minLength": 3,
            "maxLength": 20
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number of the contact.",
            "minLength": 3,
            "maxLength": 20
          },
          "email": {
            "type": "string",
            "description": "Email address of the contact.",
            "format": "email"
          },
          "isFavourite": {
            "type": "boolean",
            "description": "Indicates whether the contact is a favorite.",
            "default": false
          },
          "contactType": {
            "type": "string",
            "description": "Type of contact (work, home, personal).",
            "enum": [
              "work",
              "home",
              "personal"
            ],
            "default": "personal"
          },
          "photo": {
            "type": "string",
            "description": "URL to the contact's photo.",
            "default": "https://res.cloudinary.com/divyszzpf/image/upload/v1727786307/e2ft3t0ptrwg6rco1rsm.png"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the contact was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the contact was last updated."
          }
        },
        "required": [
          "userId",
          "name",
          "phoneNumber",
          "contactType"
        ]
      },
      "Register": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "email",
          "password"
        ]
      },
      "Login": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "RequestResetEmail": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResetPassword": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "password",
          "token"
        ]
      },
      "auth": {
        "type": "object",
        "properties": {
          "Register": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "email",
              "password"
            ]
          },
          "Login": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            },
            "required": [
              "email",
              "password"
            ]
          },
          "RequestResetEmail": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string"
              }
            },
            "required": [
              "email"
            ]
          },
          "ResetPassword": {
            "type": "object",
            "properties": {
              "password": {
                "type": "string"
              },
              "token": {
                "type": "string"
              }
            },
            "required": [
              "password",
              "token"
            ]
          }
        }
      }
    }
  }
}